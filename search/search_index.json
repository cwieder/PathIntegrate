{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PathIntegrate PathIntegrate Python package for pathway-based multi-omics data integration Features Pathway-based multi-omics data integration using PathIntegrate Multi-View and Single-View models Multi-View model: Integrates multiple omics datasets using a shared pathway-based latent space Single-View model: Integrates multi-omics data into one set of multi-omics pathway scores and applies an SKlearn-compatible predictive model Pathway importance Sample prediction SKlearn-like API for easy integration into existing pipelines Support for multiple pathway databases, including KEGG and Reactome Support for multiple pathway scoring methods available via the sspa package Cytoscape Network Viewer app for visualizing pathway-based multi-omics data integration results Installation pip install PathIntegrate Tutorials and documentation Please see our Quickstart guide on Google Colab Citing PathIntegrate If you use PathIntegrate in your research, please cite our paper: PathIntegrate: Multivariate modelling approaches for pathway-based multi-omics data integration Cecilia Wieder, Juliette Cooke, Clement Frainay, Nathalie Poupin, Jacob G. Bundy, Russell Bowler, Fabien Jourdan, Katerina J. Kechris, Rachel PJ Lai, Timothy Ebbels Manuscript in preparation","title":"Home"},{"location":"#pathintegrate","text":"PathIntegrate Python package for pathway-based multi-omics data integration","title":"PathIntegrate"},{"location":"#features","text":"Pathway-based multi-omics data integration using PathIntegrate Multi-View and Single-View models Multi-View model: Integrates multiple omics datasets using a shared pathway-based latent space Single-View model: Integrates multi-omics data into one set of multi-omics pathway scores and applies an SKlearn-compatible predictive model Pathway importance Sample prediction SKlearn-like API for easy integration into existing pipelines Support for multiple pathway databases, including KEGG and Reactome Support for multiple pathway scoring methods available via the sspa package Cytoscape Network Viewer app for visualizing pathway-based multi-omics data integration results","title":"Features"},{"location":"#installation","text":"pip install PathIntegrate","title":"Installation"},{"location":"#tutorials-and-documentation","text":"Please see our Quickstart guide on Google Colab","title":"Tutorials and documentation"},{"location":"#citing-pathintegrate","text":"If you use PathIntegrate in your research, please cite our paper: PathIntegrate: Multivariate modelling approaches for pathway-based multi-omics data integration Cecilia Wieder, Juliette Cooke, Clement Frainay, Nathalie Poupin, Jacob G. Bundy, Russell Bowler, Fabien Jourdan, Katerina J. Kechris, Rachel PJ Lai, Timothy Ebbels Manuscript in preparation","title":"Citing PathIntegrate"},{"location":"input/","text":"Input data for PathIntegrate Omics data Each multi-omics dataset should be in the form of a pandas DataFrame with samples as rows and molecules as columns. The index of the DataFrame should be the sample IDs, and the columns should be the molecule IDs. The molecule IDs should match those of the desired pathway database (i.e. ChEBI IDs, UniProt IDs, and ENSEMBL genes for Reactome; and KEGG IDs for KEGG). The values in the DataFrame should be the molecule abundances for each sample. Note The omics data should be pre-processed before inputting into PathIntegrate. PathIntgrate will automatically standardise the data, but it is recommended to log-transform the data before inputting into PathIntegrate. sample_id 1372 16610 72665 30915 37373 Group INCOV092-BL 1.541009 1.228611 1.224076 1.962028 0.652984 COVID INCOV107-BL 0.910486 2.169111 2.819585 1.234384 1.453066 COVID INCOV020-BL 0.831297 0.23298 2.126393 0.861793 2.877589 COVID INCOV035-BL 1.862011 0.792962 1.434183 1.223473 0.706152 COVID INCOV122-BL 1.416927 2.493762 1.77004 0.888144 0.693444 Non-covid INCOV084-BL 1.622171 1.021112 2.323956 0.573877 0.764003 Non-covid INCOV086-BL 1.610941 1.205343 0.83498 2.600065 1.700068 Non-covid INCOV133-BL 0.83727 2.144127 1.24222 1.035411 2.037335 Non-covid Pathways Pathways should be in the form of a pandas DataFrame with pathways as rows and molecules as columns. The index of the DataFrame should be the pathway IDs, and the columns should be the molecule IDs. The first column should be the pathway names or descriptions. Pathways can be from any pathway database, but the molecule IDs should match those of the omics data. Each pathway can either contain molecules from a single omics, or a combination of omics. Note Pathways can be downloaded using the sspa package Pathway_name 0 1 2 3 4 1 Pathway_52 Q13554 P61289 P05114 P62081 P54760 2 Pathway_53 Q9Y243 P17252 3 Pathway_54 16708 P06732 P61289 O00220 O75914 4 Pathway_55 O15264 P25786 5 Pathway_56 P07858 P62979 Q9Y625 P14778 P12314 6 Pathway_57 P18510 P15260 Q13557 P32942 P04818 7 Pathway_58 P00738 P37023 P01588 P63098 P05362 8 Pathway_59 P52798 P15498","title":"Input data"},{"location":"input/#input-data-for-pathintegrate","text":"","title":"Input data for PathIntegrate"},{"location":"input/#omics-data","text":"Each multi-omics dataset should be in the form of a pandas DataFrame with samples as rows and molecules as columns. The index of the DataFrame should be the sample IDs, and the columns should be the molecule IDs. The molecule IDs should match those of the desired pathway database (i.e. ChEBI IDs, UniProt IDs, and ENSEMBL genes for Reactome; and KEGG IDs for KEGG). The values in the DataFrame should be the molecule abundances for each sample. Note The omics data should be pre-processed before inputting into PathIntegrate. PathIntgrate will automatically standardise the data, but it is recommended to log-transform the data before inputting into PathIntegrate. sample_id 1372 16610 72665 30915 37373 Group INCOV092-BL 1.541009 1.228611 1.224076 1.962028 0.652984 COVID INCOV107-BL 0.910486 2.169111 2.819585 1.234384 1.453066 COVID INCOV020-BL 0.831297 0.23298 2.126393 0.861793 2.877589 COVID INCOV035-BL 1.862011 0.792962 1.434183 1.223473 0.706152 COVID INCOV122-BL 1.416927 2.493762 1.77004 0.888144 0.693444 Non-covid INCOV084-BL 1.622171 1.021112 2.323956 0.573877 0.764003 Non-covid INCOV086-BL 1.610941 1.205343 0.83498 2.600065 1.700068 Non-covid INCOV133-BL 0.83727 2.144127 1.24222 1.035411 2.037335 Non-covid","title":"Omics data"},{"location":"input/#pathways","text":"Pathways should be in the form of a pandas DataFrame with pathways as rows and molecules as columns. The index of the DataFrame should be the pathway IDs, and the columns should be the molecule IDs. The first column should be the pathway names or descriptions. Pathways can be from any pathway database, but the molecule IDs should match those of the omics data. Each pathway can either contain molecules from a single omics, or a combination of omics. Note Pathways can be downloaded using the sspa package Pathway_name 0 1 2 3 4 1 Pathway_52 Q13554 P61289 P05114 P62081 P54760 2 Pathway_53 Q9Y243 P17252 3 Pathway_54 16708 P06732 P61289 O00220 O75914 4 Pathway_55 O15264 P25786 5 Pathway_56 P07858 P62979 Q9Y625 P14778 P12314 6 Pathway_57 P18510 P15260 Q13557 P32942 P04818 7 Pathway_58 P00738 P37023 P01588 P63098 P05362 8 Pathway_59 P52798 P15498","title":"Pathways"},{"location":"gendocs_docs/reference/pathintegrate/","text":"PathIntegrate source PathIntegrate ( omics_data : dict , metadata , pathway_source , sspa_scoring = sspa . sspa_SVD , min_coverage = 3 ) PathIntegrate class for multi-omics pathway integration. Args omics_data (dict) : Dictionary of omics data. Keys are omics names, values are pandas DataFrames containing omics data where rows contain samples and columns reprsent features. metadata (pandas.Series) : Metadata for samples. Index is sample names, values are class labels. pathway_source (pandas.DataFrame) : GMT style pathway source data. Must contain column 'Pathway_name'. sspa_scoring (object, optional) : Scoring method for ssPA. Defaults to sspa.sspa_SVD. Options are sspa.sspa_SVD, sspa.sspa_ssGSEA, sspa.sspa_KPCA, sspa.sspa_ssClustPA, sspa.sspa_zscore. min_coverage (int, optional) : Minimum number of molecules required in a pathway. Defaults to 3. Attributes omics_data (dict) : Dictionary of omics data. Keys are omics names, values are pandas DataFrames. omics_data_scaled (dict) : Dictionary of omics data scaled to mean 0 and unit variance. Keys are omics names, values are pandas DataFrames. metadata (pandas.Series) : Metadata for samples. Index is sample names, values are class labels. pathway_source (pandas.DataFrame) : Pathway source data. pathway_dict (dict) : Dictionary of pathways. Keys are pathway names, values are lists of molecules. sspa_scoring (object) : Scoring method for SSPA. min_coverage (int) : Minimum number of omics required to cover a pathway. sspa_method (object) : SSPA scoring method. sspa_scores_mv (dict) : Dictionary of SSPA scores for each omics data. Keys are omics names, values are pandas DataFrames. sspa_scores_sv (pandas.DataFrame) : SSPA scores for all omics data concatenated. coverage (dict) : Dictionary of pathway coverage. Keys are pathway names, values are number of omics covering the pathway. mv (object) : Fitted MultiView model. sv (object) : Fitted SingleView model. labels (pandas.Series) : Class labels for samples. Index is sample names, values are class labels. Methods: .get_multi_omics_coverage source . get_multi_omics_coverage () .MultiView source . MultiView ( ncomp = 2 ) Fits a PathIntegrate MultiView model using MBPLS. Args ncomp (int, optional) : Number of components. Defaults to 2. Returns object : Fitted PathIntegrate MultiView model. .SingleView source . SingleView ( model = sklearn . linear_model . LogisticRegression , model_params = None ) Fits a PathIntegrate SingleView model using an SKLearn-compatible predictive model. Args model (object, optional) : SKlearn prediction model class. Defaults to sklearn.linear_model.LogisticRegression. model_params ( type , optional) : Model-specific hyperparameters. Defaults to None. Returns object : Fitted PathIntegrate SingleView model. .SingleViewCV source . SingleViewCV ( model = sklearn . linear_model . LogisticRegression , model_params = None , cv_params = None ) Cross-validation for SingleView model. Args model (object, optional) : SKlearn prediction model class. Defaults to sklearn.linear_model.LogisticRegression. model_params ( type , optional) : Model-specific hyperparameters. Defaults to None. cv_params (dict, optional) : Cross-validation parameters. Defaults to None. Returns object : Cross-validation results. .SingleViewGridSearchCV source . SingleViewGridSearchCV ( param_grid , model = sklearn . linear_model . LogisticRegression , grid_search_params = None ) Grid search cross-validation for SingleView model. Args param_grid (dict) : Grid search parameters. model (object, optional) : SKlearn prediction model class. Defaults to sklearn.linear_model.LogisticRegression. grid_search_params (dict, optional) : Grid search parameters. Defaults to None. Returns object : GridSearchCV object. .MultiViewCV source . MultiViewCV () Cross-validation for MultiView model. Returns object : Cross-validation results. .MultiViewGridSearchCV source . MultiViewGridSearchCV ()","title":"Pathintegrate"},{"location":"gendocs_docs/reference/pathintegrate/#_1","text":"","title":""},{"location":"gendocs_docs/reference/pathintegrate/#pathintegrate","text":"source PathIntegrate ( omics_data : dict , metadata , pathway_source , sspa_scoring = sspa . sspa_SVD , min_coverage = 3 ) PathIntegrate class for multi-omics pathway integration. Args omics_data (dict) : Dictionary of omics data. Keys are omics names, values are pandas DataFrames containing omics data where rows contain samples and columns reprsent features. metadata (pandas.Series) : Metadata for samples. Index is sample names, values are class labels. pathway_source (pandas.DataFrame) : GMT style pathway source data. Must contain column 'Pathway_name'. sspa_scoring (object, optional) : Scoring method for ssPA. Defaults to sspa.sspa_SVD. Options are sspa.sspa_SVD, sspa.sspa_ssGSEA, sspa.sspa_KPCA, sspa.sspa_ssClustPA, sspa.sspa_zscore. min_coverage (int, optional) : Minimum number of molecules required in a pathway. Defaults to 3. Attributes omics_data (dict) : Dictionary of omics data. Keys are omics names, values are pandas DataFrames. omics_data_scaled (dict) : Dictionary of omics data scaled to mean 0 and unit variance. Keys are omics names, values are pandas DataFrames. metadata (pandas.Series) : Metadata for samples. Index is sample names, values are class labels. pathway_source (pandas.DataFrame) : Pathway source data. pathway_dict (dict) : Dictionary of pathways. Keys are pathway names, values are lists of molecules. sspa_scoring (object) : Scoring method for SSPA. min_coverage (int) : Minimum number of omics required to cover a pathway. sspa_method (object) : SSPA scoring method. sspa_scores_mv (dict) : Dictionary of SSPA scores for each omics data. Keys are omics names, values are pandas DataFrames. sspa_scores_sv (pandas.DataFrame) : SSPA scores for all omics data concatenated. coverage (dict) : Dictionary of pathway coverage. Keys are pathway names, values are number of omics covering the pathway. mv (object) : Fitted MultiView model. sv (object) : Fitted SingleView model. labels (pandas.Series) : Class labels for samples. Index is sample names, values are class labels. Methods:","title":"PathIntegrate"},{"location":"gendocs_docs/reference/pathintegrate/#get_multi_omics_coverage","text":"source . get_multi_omics_coverage ()","title":".get_multi_omics_coverage"},{"location":"gendocs_docs/reference/pathintegrate/#multiview","text":"source . MultiView ( ncomp = 2 ) Fits a PathIntegrate MultiView model using MBPLS. Args ncomp (int, optional) : Number of components. Defaults to 2. Returns object : Fitted PathIntegrate MultiView model.","title":".MultiView"},{"location":"gendocs_docs/reference/pathintegrate/#singleview","text":"source . SingleView ( model = sklearn . linear_model . LogisticRegression , model_params = None ) Fits a PathIntegrate SingleView model using an SKLearn-compatible predictive model. Args model (object, optional) : SKlearn prediction model class. Defaults to sklearn.linear_model.LogisticRegression. model_params ( type , optional) : Model-specific hyperparameters. Defaults to None. Returns object : Fitted PathIntegrate SingleView model.","title":".SingleView"},{"location":"gendocs_docs/reference/pathintegrate/#singleviewcv","text":"source . SingleViewCV ( model = sklearn . linear_model . LogisticRegression , model_params = None , cv_params = None ) Cross-validation for SingleView model. Args model (object, optional) : SKlearn prediction model class. Defaults to sklearn.linear_model.LogisticRegression. model_params ( type , optional) : Model-specific hyperparameters. Defaults to None. cv_params (dict, optional) : Cross-validation parameters. Defaults to None. Returns object : Cross-validation results.","title":".SingleViewCV"},{"location":"gendocs_docs/reference/pathintegrate/#singleviewgridsearchcv","text":"source . SingleViewGridSearchCV ( param_grid , model = sklearn . linear_model . LogisticRegression , grid_search_params = None ) Grid search cross-validation for SingleView model. Args param_grid (dict) : Grid search parameters. model (object, optional) : SKlearn prediction model class. Defaults to sklearn.linear_model.LogisticRegression. grid_search_params (dict, optional) : Grid search parameters. Defaults to None. Returns object : GridSearchCV object.","title":".SingleViewGridSearchCV"},{"location":"gendocs_docs/reference/pathintegrate/#multiviewcv","text":"source . MultiViewCV () Cross-validation for MultiView model. Returns object : Cross-validation results.","title":".MultiViewCV"},{"location":"gendocs_docs/reference/pathintegrate/#multiviewgridsearchcv","text":"source . MultiViewGridSearchCV ()","title":".MultiViewGridSearchCV"}]}